#!/bin/bash
#------------------------------------------------------------------------------
# License
#
#    Copyright (C) 2011-2014 blueCAPE Lda
#
#    This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#    For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#    This file is a derivative work of OpenFOAM.
#
#    OpenFOAM is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     wmakeVerifyExeDependencies
#
# Description
#     Script for verifying and closing dependencies of application binaries 
#   built for OpenFOAM. This will then rely on the user running wmake again 
#   on the desired folder.
#   NOTE: this script was partially based on the wmake script.
#
#------------------------------------------------------------------------------
Script=${0##*/}

#function that tells the user how to use this script
usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE
usage: $Script dir

This a helper script to close dependencies that are left open in the MinGW builds.

The 'dir' argument is the folder of the solver or utility that you want to close dependencies on.
    e.g., $Script solvers

Then you will have to run wmake again.
    e.g., wmake all solvers

USAGE
    exit 1
}

#this will check and try to close dependencies
# usage:
# processFolder folder_that_already_has_processed_data
processFolder()
{
  localDir=$1
  opFile=$localDir/options
  fiFile=$localDir/files

  #end if the needed files don't exist
  if [ ! -e $opFile -o ! -e $fiFile ]; then return; fi

  #retrieve the name of the binary application
  exeName=`grep -e "EXE.*=" $fiFile | sed 's=.*/=='`".exe"

  #if it didn't find anything, then cancel search for this one
  if [ "x$exeName" = "x" ]; then return; fi

  #locate where the binary is
  if [ -e $FOAM_APPBIN/$exeName ]; then
    exeName=$FOAM_APPBIN/$exeName
  elif [ -e $FOAM_USER_APPBIN/$exeName ]; then
    exeName=$FOAM_USER_APPBIN/$exeName
  else
    #no executable, then no dependencies to close!
    return;
  fi

  #check if dependencies have already been verified and closed
  if [ `grep "LIBS_TO_LOAD" $opFile | wc -l` -gt 0 ]; then 
    echo "This application already has dependencies closed: $exeName"
    return;
  fi

  #now retrieve the list of libraries the executable is linked to
  librariesLinkedTo=`objdump -x $exeName | grep dll | grep lib | sort -u | sed -e 's=.*DLL Name: lib==' -e 's=\.dll$=='`

  #now retrieve the libraries that it should link to (and change spaces to lines)
  EXE_LIBS=`grep -e "EXE_LIBS.*=" $opFile | sed 's=EXE\_LIBS.*\=[ ]*=='`
  LIBSTOLOAD=`echo $EXE_LIBS | sed -e "s/\-l\([a-zA-Z0-9]*\ *\)/\1/g" | sed -e 's=[ ]=\n=g' | sed -e "s/\-L.*//g" -e 's/\$.*\.o//g' -e 's/^\$.*)$//g'`

  #now remove the libraries that are already loaded and not declared in the other list
  librariesLinkedToUnique=""
  for toParse in $librariesLinkedTo; do
    if [ `echo $LIBSTOLOAD | grep "$toParse" | wc -l` -gt 0 ]; then
      librariesLinkedToUnique="$librariesLinkedToUnique $toParse"
    fi
  done
  librariesLinkedTo=`echo $librariesLinkedToUnique | sed 's=[ ]=\n=g'`
  unset librariesLinkedToUnique

  #now compare the lists of libraries
  LIBSMUSTLOAD=`echo -e "$LIBSTOLOAD\n$librariesLinkedTo" | sort | uniq -u`

  #remove leading spaces
  LIBSMUSTLOAD=`echo $LIBSMUSTLOAD | sed -e 's=^[ ]*==g'`

  #convert spaces to commas
  LIBSMUSTLOAD=`echo $LIBSMUSTLOAD | sed -e 's=\ =,=g'`

  #now if there is anything to still link to  
  if [ `echo $LIBSMUSTLOAD | sed 's=,=\n=g' | wc -l` -gt 0 -a "x" != "x$LIBSMUSTLOAD" ]; then
    echo 'EXE_INC += -DLIBS_TO_LOAD="\"'$LIBSMUSTLOAD'\""' >> $opFile
    dependenciesClosed=`expr $dependenciesClosed + 1`
    
    echo "Dependencies added to: $exeName"
  fi

}

# provide immediate help, even if none of the environment is set
if [ "$1" = "-h" -o "$1" = "-help" -o "$#" -eq 0 ]
then
    usage
fi

#
# check environment variables
#
for check in WM_OPTIONS WM_LINK_LANGUAGE WM_DIR WM_PROJECT WM_PROJECT_DIR
do
    eval test "\$$check" || {
        echo "$Script error: environment variable \$$check not set" 1>&2
        exit 1
    }
done

#get the base folder directory
dir=$1

#retrieve a list of paths to the folders named Make
folders=$(find $dir -name Make)

#reset variable that indicates that at least one dependency has been closed
dependenciesClosed=0

#now parse each folder and check each application
for folder in $folders; do
  if [ -d $folder/$WM_OPTIONS ]; then
    processFolder $folder/$WM_OPTIONS
  fi
done

if [ $dependenciesClosed -gt 0 ]; then
  echo "There are $dependenciesClosed applications that are going to be rebuilt."
fi

exit $dependenciesClosed
