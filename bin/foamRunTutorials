#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2011-2018 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# 2016-08-03 blueCAPE Lda: Added -jobs and usage information
# 2017-09-13 blueCAPE Lda: Adapted to OpenFOAM 5.x
# 2017-09-26 blueCAPE Lda: Fixed how the arguments are passed onwards
#------------------------------------------------------------------------------
# License
#     This file is a derivative work of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     foamRunTutorials
#
# Description
#     Run either Allrun or blockMesh/application in current directory
#     and all its subdirectories.
#
#------------------------------------------------------------------------------
Script=$0
[ "/${Script#/}" != "$Script" ] && Script="$PWD/$Script"


# Normally use standard "make"
make="make"

# Source tutorial run functions
. "$WM_PROJECT_DIR/bin/tools/RunFunctions"

usage()
{
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/} [OPTIONS]
options:
  -help      | -h     print the usage
  -skipFirst | -s     do not execute the first Allrun script
  -test      | -t     run test loop
  -jobs N    | -j     for running multiple cases in parallel with N cores
  -parallel  | -p     run only cases that are configured to run in parallel
  -nonParallel | -n   run only cases that are configured to run in serial

Helper script used by the Allrun scripts in the OpenFOAM tutorials

When running multiple cases in parallel with '-jobs', keep in mind that this
does not take into account how many cores each case will need to run; therefore
it's advisable to use it along with the option '-nonParallel'.

USAGE
    exit 1
}

checkIfAllrunCanBeExecuted()
{
    if $serialOnly || $parallelOnly
    then
        # Check both inside Allrun and Allrun.*, given that Allrun-* are
        # optional
        if grep -sve "^#" Allrun Allrun.* | grep -qe "runParallel"
        then
            hasGotRunParallel=true
        else
            hasGotRunParallel=false
        fi

        if $serialOnly && $hasGotRunParallel
        then
            echo "Skipping case '$PWD', which is meant to run in parallel."
            exit 0
        elif $parallelOnly && ! $hasGotRunParallel
        then
            echo "Skipping case '$PWD', which is meant to run in serial."
            exit 0
        fi
    fi
}

checkIfDefaultRunCanBeExecuted()
{
    if $parallelOnly
    then
        echo "Skipping case '$PWD', which is meant to run in serial."
        exit 0
    fi
}

#------------------------------------------------------------------------------

skipFirst=false
serialOnly=false
parallelOnly=false
passArgsMake=
passArgsAllrun=

# Parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage && exit 0
        ;;
    -s | -skipFirst)
        skipFirst=true
        shift
        ;;
    -t | -test)
        passArgsMake="${passArgsMake} -test"
        passArgsAllrun="${passArgsAllrun} -test"
        shift
        ;;
    -n | -nonParallel)
        serialOnly=true
        passArgsMake="${passArgsMake} $1"
        shift
        ;;
    -p | -parallel)
        parallelOnly=true
        passArgsMake="${passArgsMake} $1"
        shift
        ;;
    -j | -jobs)
        if test $# -ge 2 && expr $2 + 1 > /dev/null 2>&1
        then
            make="${make} -j $2"
            echo "Running multiple cases enabled on $2 cores"
            shift 2
        else
            usage "Error: Missing number of jobs"
        fi
        ;;
    -h | -help)
        usage
        ;;
    -*)
        usage "unknown option: '$*'"
        ;;
    *)
        break
        ;;
    esac
done

if $serialOnly && $parallelOnly
then
    usage "Cannot use -parallel and -nonParallel options at the same time."
fi

# If an argument is supplied do not execute ./Allrun to avoid recursion
if ! $skipFirst && [ -f "./Allrun" ]
then
    # Need to assess if this case can be executed in serial or parallel
    checkIfAllrunCanBeExecuted

    # Run specialised Allrun script.
    if $parallelOnly && [ -e "Allrun-parallel" ]
    then
        ./Allrun-parallel $passArgsAllrun
    else
        ./Allrun $passArgsAllrun
    fi
elif [ -d system ]
then
    # Need to assess if this case can be executed in serial or parallel
    checkIfDefaultRunCanBeExecuted

    # Run normal case.
    application=$(getApplication)
    runApplication blockMesh
    runApplication "$application"
else
    # Loop over sub-directories and compile any applications
    for caseName in *
    do
        if [ -d "$caseName" -a -d "$caseName/Make" ]
        then
            ( compileApplication "$caseName" )
        fi
    done
    FOAM_TARGETS=$(for d in *; do [ -d "$d" ] && echo "$d"; done | xargs)

    # Run all cases which have not already been run
    $make -k -f "$WM_PROJECT_DIR/bin/tools/MakefileDirs" \
          FOAM_TARGETS="$FOAM_TARGETS" \
          FOAM_APP="$Script" FOAM_ARGS="$passArgsMake"
fi

#------------------------------------------------------------------------------
