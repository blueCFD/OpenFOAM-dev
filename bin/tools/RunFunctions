#---------------------------------*- sh -*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2011-2021 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# 2014-02-21 blueCAPE Lda: Modifications for blueCFD-Core 2.3
# 2016-07-26 blueCAPE Lda: Modifications for blueCFD-Core 2016-1
#------------------------------------------------------------------------------
# License
#     This file is a derivative work of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
#     This file has been modified by blueCAPE's unofficial mingw patches for
#     OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     Modifications made:
#        - Derived from the patches for blueCFD 2.1 and 2.2.
#        - Added ability to override how "runParallel" works, as well as using
#          the mpirun we want, as done in foamJob.
#        - Added abilities similar to foamJob, regarding the usage of the 
#          machines files.
#
# Script
#     RunFunctions
#
# Description
#     Miscellaneous functions for running tutorial cases
#------------------------------------------------------------------------------

isTest()
{
    for i in "$@"; do
        if [ "$i" = "-test" ]
        then
            return 0
        fi
    done
    return 1
}

getNumberOfProcessors()
{
    foamDictionary -entry numberOfSubdomains -value system/decomposeParDict
}

getApplication()
{
    foamDictionary -entry application -value system/controlDict
}

runApplication()
{
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false
    LOG_SUFFIX=

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append|-a)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite|-o)
                LOG_IGNORE=true
                ;;
            -suffix|-s)
                LOG_SUFFIX=".$2"
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                LOG_SUFFIX="${APP_NAME}${LOG_SUFFIX}"
                ;;
        esac

        shift
    done

    if [ -f log.$LOG_SUFFIX ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "$APP_NAME already run on $PWD:" \
             "remove log file 'log.$LOG_SUFFIX' to re-run"
    else
        echo "Running $APP_RUN on $PWD"
        if [ "$LOG_APPEND" = "true" ]; then
            $APP_RUN "$@" >> log.$LOG_SUFFIX 2>&1
        else
            $APP_RUN "$@" > log.$LOG_SUFFIX 2>&1
        fi
    fi
}

runParallel()
{
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false
    LOG_SUFFIX=
    nProcs=$(getNumberOfProcessors)

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append|-a)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite|-o)
                LOG_IGNORE=true
                ;;
            -suffix|-s)
                LOG_SUFFIX=".$2"
                shift
                ;;
            -np|-n)
                nProcs="$2"
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                LOG_SUFFIX="${APP_NAME}${LOG_SUFFIX}"
                ;;
        esac

        shift
    done

    if [ -f log.$LOG_SUFFIX ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "$APP_NAME already run on $PWD:" \
             "remove log file 'log.$LOG_SUFFIX' to re-run"
    else

        export mpirun=`findMpirun` || echo "'mpirun' not found"
        load_mpi_opts

        echo "Running $APP_RUN in parallel on $PWD using $nProcs processes"
        if [ "$LOG_APPEND" = "true" ]; then
            ( $mpirun -np $nProcs $mpiopts $APP_RUN -parallel "$@" < /dev/null >> log.$LOG_SUFFIX 2>&1 )
        else
            ( $mpirun -np $nProcs $mpiopts $APP_RUN -parallel "$@" < /dev/null > log.$LOG_SUFFIX 2>&1 )
        fi
    fi
}

compileApplication()
{
    echo "Compiling $1 application"
    wmake $1
}

cloneCase()
{
    from=$1
    to=$2

    if [ ! -d $from ]
    then
        echo "Case $from does not exist"
        return 1
    elif [ -d $to ]
    then
        echo "Case already cloned: remove case directory $to to clone"
        return 1
    else
        echo "Cloning $to case from $from"
        mkdir -p $to
        for f in 0 system constant
        do
            cp -R $from/$f $to
        done
        return 0
    fi
}

cloneMesh()
{
    from=$1/constant/polyMesh
    to=$2/constant/polyMesh

    if [ ! -d $from ]
    then
        echo "Mesh $from does not exist"
        return 1
    elif [ -d $to ]
    then
        echo "Mesh already cloned: remove mesh directory $to to clone"
        return 1
    else
        echo "Cloning $to mesh from $from"
        cp -pr $from $to
        return 0
    fi
}

#Functions bellow this line were copied/adapted from foamJob --------------------------

load_mpi_opts()
{
    mpiopts=""

    case "$WM_MPLIB" in
    *OPENMPI)
        # add hostfile info
        for hostfile in \
            hostfile \
            machines \
            system/hostfile \
            system/machines \
            ;
        do
            if [ -r $hostfile ]
            then
                mpiopts="$mpiopts -hostfile $hostfile"
                break
            fi
        done

        #
        # Send FOAM_SETTINGS to parallel processes. so the proper definitions are sent as well.
        # Note: don't send for now, simply because foamExec isn't being called here
        #
        #mpiopts="$mpiopts -x FOAM_SETTINGS"
        ;;
    MPICH | MSMPI)
        # add hostfile info
        for hostfile in \
            hostfile \
            machines \
            system/hostfile \
            system/machines \
            ;
        do
           if [ -r $hostfile ]
           then
              mpiopts="$mpiopts -machinefile $hostfile"
              break
           fi
        done

        #
        # Send FOAM_SETTINGS to parallel processes. so the proper definitions are sent as well.
        # Note: don't send for now, simply because foamExec isn't being called here
        #
        #mpiopts="$mpiopts -env FOAM_SETTINGS \"${FOAM_SETTINGS}\""
        ;;
    esac

    #
    # Add additional options that the user might need, such as disabling lo or eth0
    #
    mpiopts="$mpiopts $MPI_ACCESSORY_OPTIONS"

    #make sure the variable is visible by forking shells
    export mpiopts
}

# replacement for possibly buggy 'which'
findExec() {
    case "$1" in
    */*)
        if [ -x "$1" ]
        then
            echo "$1"
            return 0
        fi
        ;;
    esac

    oldIFS=$IFS
    IFS=':'
    for d in $PATH
    do
        # echo "testing: $d/$1" 1>&2
        if [ -x "$d/$1" -a ! -d "$d/$1" ]
        then
            # echo "Found exec: $d/$1" 1>&2
            IFS=$oldIFS
            echo "$d/$1"
            return 0
        fi
     done
     IFS=$oldIFS
     echo ""
     return 1
}

#find mpirun or mpiexec, by checking if MPI_ARCH_PATH matches the path for each
findMpirun() {
  path2mpirun=`findExec mpirun`
  path2mpiexec=`findExec mpiexec`

  if [ -n "$path2mpirun" -a "${path2mpirun%/*}" = "$MPI_ARCH_PATH/bin" ]; then
    echo $path2mpirun
    return 0
  fi

  if [ -n "$path2mpiexec" -a "${path2mpiexec%/*}" = "$MPI_ARCH_PATH/bin" ]; then
    echo $path2mpiexec
    return 0
  fi

  if [ -n "$path2mpirun" ]; then
    echo $path2mpirun
    return 0
  fi

  if [ -n "$path2mpiexec" ]; then
    echo $path2mpiexec
    return 0
  fi

  echo ""
  return 1
}

#------------------------------------------------------------------------------
