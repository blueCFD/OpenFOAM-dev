#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2011-2020 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# 2016-08-03 blueCAPE Lda: Added -target and -jobs
# 2017-09-26 FSD blueCAPE Lda: Added more verbosity
# 2020-09-28 FSD blueCAPE Lda: Ability to test in function of wall clock
#------------------------------------------------------------------------------
# License
#     This file is a derivative work of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     Alltest
#
# Description
#     quickly tests the tutorials
#
#------------------------------------------------------------------------------
cd "${0%/*}" || exit 1 # Run from this directory

usage()
{
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/} [OPTION]

options:
  -root <dir>   | -r <dir>
                      specify root directory to run tests from
  -target <dir> | -t <dir>
                      specify directory where the tests are executed in
  -help      | -h     print the usage
  -jobs N    | -j     for running multiple cases in parallel with N cores
  -parallel  | -p     run only cases that are configured to run in parallel
  -nonParallel | -n   run only cases that are configured to run in serial
  -wallClock <sec> | -w <sec>
                      run the solvers for a limited amount of wall clock time
                    in second, instead of just running a single time step

* quickly tests the tutorials

Currently defined paths:
  root:    $(realpath $rootDir)
  target:  $(realpath $testDir)

USAGE
    exit 1
}

#------------------------------------------------------------------------------

rootDir="./"
testDir=../tutorialsTest

RUN_ARGUMENTS=""
serialOnly=false
parallelOnly=false
wallClockLimit=-1

# Parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -r | -root)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        rootDir="$2"
        shift
        ;;
    -t | -target)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        testDir="$2"
        shift
        ;;
    -j | -jobs)
        if test $# -ge 2 && expr $2 + 1 > /dev/null 2>&1
        then
            RUN_ARGUMENTS="${RUN_ARGUMENTS} $1 $2"
            shift
        else
            usage "Error: Missing number of jobs"
        fi
        ;;
    -n | -nonParallel)
        serialOnly=true
        RUN_ARGUMENTS="${RUN_ARGUMENTS} $1"
        echo "NOTE: Will only run cases in serial mode."
        ;;
    -p | -parallel)
        parallelOnly=true
        RUN_ARGUMENTS="${RUN_ARGUMENTS} $1"
        echo "NOTE: Will only run cases in parallel mode."
        ;;
    -w | -wallClock)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        wallClockLimit=$2
        [ "$2" -ge 1 ] || usage "'$1' option requires an argument as an integer"
        shift
        ;;
    -h | -help)
        usage
        ;;
    -*)
        usage "unknown option: '$*'"
        ;;
    *)
        usage "unknown option/argument: '$*'"
        ;;
    esac
    shift
done


if $serialOnly && $parallelOnly
then
    usage "Cannot use -parallel and -nonParallel options at the same time."
fi

# Create a copy of the tutorials in which to run the test loop
echo "Copying the tutorials"
if [ -d "$testDir" ]
then
    rm -rf "$testDir" || exit 1
fi

echo "Copying the tutorials"
cp -r "${rootDir}" "${testDir}" || exit 1

# Change the control dict to make the tests quick
echo "Modifying the controlDicts to run only one time step"
cd ${testDir} || exit 1

if [ "$wallClockLimit" = "-1" ]
then

find . -name "controlDict*" | while read -r controlDict
do
    (
        foamDictionary -entry startFrom -set latestTime "$controlDict"
        foamDictionary -entry stopAt -set nextWrite "$controlDict"
        foamDictionary -entry writeControl -set timeStep "$controlDict"
        foamDictionary -entry writeInterval -set 1 "$controlDict"
        foamDictionary -entry DebugSwitches \
            -merge "{ fvSchemes 1; solution 1; }" "$controlDict"
    ) > /dev/null
done

else

find . -name "controlDict*" | while read -r controlDict
do
    (
        foamDictionary -entry functions "$controlDict" || \
            foamDictionary -entry functions -set "{}" "$controlDict"

        foamDictionary -entry \
            functions/"#includeFunc stopAtClockTime(stopTime=$wallClockLimit,action=writeNow)" \
            -add "" "$controlDict"

        foamDictionary -entry DebugSwitches \
            -merge "{ fvSchemes 1; solution 1; }" "$controlDict"
    ) > /dev/null
done

fi


# Copy the Allrun script into the test directory
cp -f "$FOAM_TUTORIALS"/Allrun . || exit 1

# Run everything
./Allrun -test $RUN_ARGUMENTS && exit 0 || exit 1

#------------------------------------------------------------------------------
